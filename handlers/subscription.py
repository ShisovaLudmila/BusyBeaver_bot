from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import hashlib
import time
from datetime import datetime, timedelta
import urllib.parse

from config import (
    ROBOKASSA_LOGIN, 
    ROBOKASSA_PASSWORD1, 
    ROBOKASSA_PASSWORD2, 
    ROBOKASSA_TEST_MODE,
    PAYMENTS_FREE,
    ADMIN_IDS
)
from create_bot import db, logger, bot
from all_kb import main_kb, employer_main_kb

router = Router()

# Define FSM states for subscription flow
class SubscriptionStates(StatesGroup):
    selecting_plan = State()
    entering_promo = State()
    confirming_payment = State()

# Define callback data classes
class SubscriptionCallback:
    def __init__(self, action, months=None, amount=None):
        self.action = action
        self.months = months
        self.amount = amount
        
    def pack(self):
        if self.months and self.amount:
            return f"sub:{self.action}:{self.months}:{self.amount}"
        return f"sub:{self.action}"
        
    @classmethod
    def unpack(cls, callback_data):
        parts = callback_data.split(":")
        if len(parts) == 4:
            _, action, months, amount = parts
            return cls(action, int(months), int(amount))
        else:
            _, action = parts
            return cls(action)

# Subscription plans
SUBSCRIPTION_PLANS = [
    {"months": 1, "name": "1 –º–µ—Å—è—Ü", "price": 5000, "description": "–ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω"},
    {"months": 3, "name": "3 –º–µ—Å—è—Ü–∞", "price": 13500, "description": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–ª–∞–Ω (—ç–∫–æ–Ω–æ–º–∏—è 10%)"},
    {"months": 6, "name": "6 –º–µ—Å—è—Ü–µ–≤", "price": 25000, "description": "–ü—Ä–µ–º–∏—É–º –ø–ª–∞–Ω (—ç–∫–æ–Ω–æ–º–∏—è 16%)"}
]

# Only show subscription button to employers
@router.message(F.text == "–ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π")
async def subscription_handler(message: Message, state: FSMContext):
    logger.info(f"User {message.from_user.id} requested subscription info")
    
    # Check if user is an employer
    employer_profile = db.get_tg_id_employer(message.from_user.id)
    
    if employer_profile is None:
        await message.answer(
            "–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ–¥–ø–∏—Å–∫–µ.",
            reply_markup=main_kb
        )
        return
    
    # Show subscription info
    subscription_text = (
        "üöÄ <b>Busybeaver –±–æ—Ç: –Ω–∞–π–¥–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∑–∞ —á–∞—Å</b>\n\n"
        "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏:\n"
        "‚Ä¢ –ù–µ –Ω—É–∂–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Å–∞–π—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã, –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä—è–º–æ –≤ Telegram\n"
        "‚Ä¢ –ù–µ –Ω—É–∂–Ω–æ –æ—Ñ–æ—Ä–º–ª—è—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –Ω–∞ —Å–∞–π—Ç–µ, –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å, –∏ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–∏ —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –æ—Ç–∫–ª–∏–∫–∏ —Ç–æ–ª—å–∫–æ –æ—Ç —Ç–µ—Ö, –∫—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –≤–∞—à –∑–∞–ø—Ä–æ—Å\n"
        "‚Ä¢ –ù–µ –Ω—É–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —ç—Ç–∞–ø–æ–≤ ‚Äì —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏, –æ—Ç–±–æ—Ä —Ä–µ–∑—é–º–µ, –æ—Ç–∫–ª–∏–∫–∏, –∑–≤–æ–Ω–∫–∏, —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è\n"
        "‚Ä¢ –ù–∞ hh.ru —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–¥–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ —Å—Ç–æ–∏—Ç –¥–æ 10000 —Ä—É–±–ª–µ–π, –∏ –æ—Ç–¥–µ–ª—å–Ω–æ –∑–∞ –∫–∞–∂–¥—ã–π –∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏, –≤ BusyBeaver –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ\n\n"
        "<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
        "1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤\n"
        "2. –ë–æ—Ç —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤–∞–º 5 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É\n"
        "3. –ù–∞–∂–º–∏—Ç–µ \"–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è\" –∏–ª–∏ \"–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë\"\n"
        "4. –°–æ–∏—Å–∫–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –≤–∞—à –æ—Ç–∫–ª–∏–∫ –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –µ–≥–æ ‚Äì –≤–∞—à–∏ –∞–Ω–∫–µ—Ç—ã \"–º—ç—Ç—á–∞—Ç—Å—è\", –∏ –±–æ—Ç –ø–µ—Ä–µ–¥–∞–µ—Ç –≤–∞–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥—Ä—É–≥ –¥—Ä—É–≥–∞\n\n"
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:</b>"
    )
    
    # Create keyboard with subscription plans
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"{plan['name']} - {plan['price']} ‚ÇΩ", 
            callback_data=SubscriptionCallback("select_plan", plan['months'], plan['price']).pack()
        )] for plan in SUBSCRIPTION_PLANS
    ])
    
    await message.answer(subscription_text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(SubscriptionStates.selecting_plan)

@router.callback_query(lambda c: c.data.startswith("sub:select_plan:"), SubscriptionStates.selecting_plan)
async def select_plan_handler(call: CallbackQuery, state: FSMContext):
    callback_data = SubscriptionCallback.unpack(call.data)
    
    # Store selected plan in state
    await state.update_data(
        months=callback_data.months,
        amount=callback_data.amount
    )
    
    # Ask if user has promo code
    promo_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data=SubscriptionCallback("enter_promo").pack()),
            InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞", callback_data=SubscriptionCallback("skip_promo").pack())
        ]
    ])
    
    await call.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–ª–∞–Ω –Ω–∞ {callback_data.months} {'–º–µ—Å—è—Ü' if callback_data.months == 1 else '–º–µ—Å—è—Ü–∞' if callback_data.months < 5 else '–º–µ—Å—è—Ü–µ–≤'}.\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {callback_data.amount} ‚ÇΩ",
        reply_markup=promo_keyboard
    )
    
    await call.answer()

@router.callback_query(lambda c: c.data == "sub:enter_promo", SubscriptionStates.selecting_plan)
async def enter_promo_handler(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:"
    )
    await state.set_state(SubscriptionStates.entering_promo)
    await call.answer()

@router.message(SubscriptionStates.entering_promo)
async def process_promo_handler(message: Message, state: FSMContext):
    promo_code = message.text.strip().upper()
    user_data = await state.get_data()
    
    # Check if promo code is valid
    promo_data = db.get_promocode(promo_code)
    
    if not promo_data:
        await message.answer(
            "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —Å—Ä–æ–∫ –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞", 
                    callback_data=SubscriptionCallback("skip_promo").pack()
                )]
            ])
        )
        return
    
    # Check if user has already used this promo code
    if db.check_promocode_usage(promo_code, message.from_user.id):
        await message.answer(
            "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω–µ–µ. –ö–∞–∂–¥—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞", 
                    callback_data=SubscriptionCallback("skip_promo").pack()
                )]
            ])
        )
        return
    
    # Apply discount
    original_amount = user_data["amount"]
    discount_percent = promo_data[1]
    discounted_amount = int(original_amount * (100 - discount_percent) / 100)
    
    await state.update_data(
        promo_code=promo_code,
        discount_percent=discount_percent,
        discounted_amount=discounted_amount
    )
    
    # Show payment confirmation with discount
    await message.answer(
        f"–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω! –°–∫–∏–¥–∫–∞: {discount_percent}%\n\n"
        f"–ü–ª–∞–Ω: {user_data['months']} {'–º–µ—Å—è—Ü' if user_data['months'] == 1 else '–º–µ—Å—è—Ü–∞' if user_data['months'] < 5 else '–º–µ—Å—è—Ü–µ–≤'}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –±–µ–∑ —Å–∫–∏–¥–∫–∏: {original_amount} ‚ÇΩ\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ —Å–∫–∏–¥–∫–æ–π: {discounted_amount} ‚ÇΩ",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="–û–ø–ª–∞—Ç–∏—Ç—å", 
                callback_data=SubscriptionCallback("confirm_payment").pack()
            )]
        ])
    )
    
    await state.set_state(SubscriptionStates.confirming_payment)

@router.callback_query(lambda c: c.data == "sub:skip_promo")
async def skip_promo_handler(call: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    
    await call.message.edit_text(
        f"–ü–ª–∞–Ω: {user_data['months']} {'–º–µ—Å—è—Ü' if user_data['months'] == 1 else '–º–µ—Å—è—Ü–∞' if user_data['months'] < 5 else '–º–µ—Å—è—Ü–µ–≤'}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {user_data['amount']} ‚ÇΩ",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="–û–ø–ª–∞—Ç–∏—Ç—å", 
                callback_data=SubscriptionCallback("confirm_payment").pack()
            )]
        ])
    )
    
    await state.set_state(SubscriptionStates.confirming_payment)
    await call.answer()

@router.callback_query(lambda c: c.data == "sub:confirm_payment", SubscriptionStates.confirming_payment)
async def confirm_payment_handler(call: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    
    # Get final amount (with or without discount)
    final_amount = user_data.get("discounted_amount", user_data["amount"])
    
    # If PAYMENTS_FREE is True, skip actual payment
    if PAYMENTS_FREE:
        # Process free subscription
        db.set_subscription(call.from_user.id, user_data["months"])
        
        # If promo code was used, mark it as used
        if "promo_code" in user_data:
            db.use_promocode(user_data["promo_code"], call.from_user.id)
        
        subscription_end = datetime.now() + timedelta(days=30 * user_data["months"])
        
        await call.message.edit_text(
            "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
            f"–ü–ª–∞–Ω: {user_data['months']} {'–º–µ—Å—è—Ü' if user_data['months'] == 1 else '–º–µ—Å—è—Ü–∞' if user_data['months'] < 5 else '–º–µ—Å—è—Ü–µ–≤'}\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription_end.strftime('%d.%m.%Y')}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."
        )
        
        await state.clear()
        await call.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
        return
    
    # Generate payment link for Robokassa
    inv_id = int(time.time())  # Use timestamp as invoice ID
    description = f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {user_data['months']} –º–µ—Å."
    
    # Store payment info in state
    await state.update_data(inv_id=inv_id)
    
    # Generate signature
    signature = hashlib.md5(f"{ROBOKASSA_LOGIN}:{final_amount}:{inv_id}:{ROBOKASSA_PASSWORD1}".encode()).hexdigest()
    
    # Build payment URL
    payment_url = f"https://auth.robokassa.ru/Merchant/Index.aspx?MerchantLogin={ROBOKASSA_LOGIN}&OutSum={final_amount}&InvId={inv_id}&Description={urllib.parse.quote(description)}&SignatureValue={signature}&IsTest={ROBOKASSA_TEST_MODE}"
    
    await call.message.edit_text(
        "–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. –í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_url)],
            [InlineKeyboardButton(text="–Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=SubscriptionCallback("check_payment").pack())]
        ])
    )
    
    await call.answer()

@router.callback_query(lambda c: c.data == "sub:check_payment")
async def check_payment_handler(call: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    
    # In a real implementation, you would check with Robokassa if payment was successful
    # For now, we'll just activate the subscription
    
    # Activate subscription
    db.set_subscription(call.from_user.id, user_data["months"], user_data.get("inv_id"))
    
    # If promo code was used, mark it as used
    if "promo_code" in user_data:
        db.use_promocode(user_data["promo_code"], call.from_user.id)
    
    subscription_end = datetime.now() + timedelta(days=30 * user_data["months"])
    
    await call.message.edit_text(
        "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n\n"
        f"–ü–ª–∞–Ω: {user_data['months']} {'–º–µ—Å—è—Ü' if user_data['months'] == 1 else '–º–µ—Å—è—Ü–∞' if user_data['months'] < 5 else '–º–µ—Å—è—Ü–µ–≤'}\n"
        f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription_end.strftime('%d.%m.%Y')}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."
    )
    
    await state.clear()
    await call.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")

# Admin command to create promo codes
@router.message(Command("create_promocode"))
async def create_promocode_handler(message: Message):
    # Check if user is admin
    if message.from_user.id not in ADMIN_IDS:
        return
    
    # Parse command arguments: /create_promocode CODE DISCOUNT DAYS
    parts = message.text.split()
    if len(parts) != 4:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /create_promocode –ö–û–î –ü–†–û–¶–ï–ù–¢_–°–ö–ò–î–ö–ò –°–†–û–ö_–î–ï–ô–°–¢–í–ò–Ø_–í_–î–ù–Ø–•\n"
            "–ü—Ä–∏–º–µ—Ä: /create_promocode WELCOME2023 15 30"
        )
        return
    
    try:
        code = parts[1].upper()
        discount = int(parts[2])
        days = int(parts[3])
        
        if discount <= 0 or discount > 100:
            await message.answer("–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100")
            return
            
        if days <= 0:
            await message.answer("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –¥–Ω–µ–π")
            return
            
        valid_until = datetime.now() + timedelta(days=days)
        
        # Create promo code
        db.create_promocode(code, discount, valid_until, message.from_user.id)
        
        await message.answer(
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
            f"–ö–æ–¥: {code}\n"
            f"–°–∫–∏–¥–∫–∞: {discount}%\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {valid_until.strftime('%d.%m.%Y')}"
        )
        
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")