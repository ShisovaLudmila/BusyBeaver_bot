from aiogram import F, Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram import types
from all_kb import choose_role_kb, main_kb, employer_main_kb, MyCallback_after, contact_kb, reject_kb
from state_list import STATE_LIST_EMPLOYEE, STATE_LIST_EMPLOYER
from create_bot import bot, db, router, logger

router = Router()


@router.message(Command("start"))
async def start(message: Message):
    logger.info(f"Received /start command from user {message.from_user.id}")
    db.insert_tg_id_into_user(message.from_user.id)
    await message.answer(
        """üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BusyBeaver-–±–æ—Ç –æ—Ç SpaceHub!

üîç –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä–æ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –∏–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, —Ä–∞–±–æ—Ç–∞—è –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É –¢–∏–Ω–¥–µ—Ä–∞.

üìù –ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:
‚Ä¢ –î–ª—è —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π: —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è, –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π, –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ –î–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π: —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π, –ø–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞–º–∏

üöÄ –ù–∞—á–Ω–∏—Ç–µ —Å –≤—ã–±–æ—Ä–∞ –≤–∞—à–µ–π —Ä–æ–ª–∏ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –ó–∞—Ç–µ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤!

‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ø–æ–º–æ—â—å –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å".

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:""",
        reply_markup=choose_role_kb,
        disable_web_page_preview=True,
    )


@router.message(Command("–æ—Ç–º–µ–Ω–∞"))
@router.message(F.text == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message, state: FSMContext):
    logger.info(f"Received /–æ—Ç–º–µ–Ω–∞ command from user {message.from_user.id}")
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.clear()
    
    # Check if user is an employer
    is_employer = db.get_tg_id_employer(message.from_user.id) is not None
    keyboard = employer_main_kb if is_employer else main_kb
    
    await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard)


def get_previous_state(current_state: str, state_list: list) -> str:
    current_state_index = next(
        (i for i, obj in enumerate(state_list) if obj.state_name == current_state),
        None,
    )
    previous_state_index = current_state_index - 1
    if previous_state_index < 0:
        return None, None
    return (
        state_list[previous_state_index].state_name,
        state_list[previous_state_index].state_question,
        state_list[previous_state_index].keyboard,
    )


@router.message(Command("–Ω–∞–∑–∞–¥"))
@router.message(F.text == "–Ω–∞–∑–∞–¥")
async def go_back_handler(message: Message, state: FSMContext) -> None:
    logger.info(f"Received /–Ω–∞–∑–∞–¥ command from user {message.from_user.id}")
    data = await state.get_data()
    current_state = await state.get_state()
    if not current_state:
        return
    if current_state.split(":")[0] == "employee":
        state_list = STATE_LIST_EMPLOYEE
    else:
        state_list = STATE_LIST_EMPLOYER
    (previous_state, state_message, keyboard) = get_previous_state(
        current_state, state_list
    )

    if (
        "job_title" in data
        and data["job_title"] == "—Ñ—É–ª–ª-—Ç–∞–π–º"
        and current_state == "employee:role"
    ):
        (previous_state, state_message, keyboard) = get_previous_state(
            previous_state, state_list
        )
    if callable(keyboard):
        role_data = data.get("role", [])
        keyboard = keyboard(role_data)
    if previous_state is None:
        await message.answer(
            "–í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ.",
        )
    else:
        await state.set_state(previous_state)
        await message.answer(state_message, reply_markup=keyboard)


@router.message(Command("–Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
@router.message(F.text == "–Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def go_back_to_main_menu_handler(message: Message, state: FSMContext):
    logger.info(f"Received /–Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é command from user {message.from_user.id}")
    
    # Check if user is an employer
    is_employer = db.get_tg_id_employer(message.from_user.id) is not None
    keyboard = employer_main_kb if is_employer else main_kb
    
    await message.answer("–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard)
    await state.clear()


@router.callback_query(MyCallback_after.filter(F.path == "contact"))
async def respond_message_handler(
    call: types.CallbackQuery, callback_data: MyCallback_after
):
    logger.info(f"Received contact callback from user {call.from_user.id}")
    if callback_data.state == "find_employee":
        db.set_match_result_true(
            callback_data.employee_tg_id,
            callback_data.employer_tg_id,
            callback_data.employer_tg_id,
        )
        await call.message.edit_reply_markup(reply_markup=contact_kb)
        await call.message.answer(f"–¢–µ–ª–µ–≥—Ä–∞–º–º —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è:@{callback_data.username}")
        await bot.send_message(
            chat_id=callback_data.employer_tg_id,
            text=f"–í–∑–∞–∏–º–Ω—ã–π –æ—Ç–≤–µ—Ç, —Å –≤–∞–º–∏ —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ–∏—Å–∫–∞—Ç–µ–ª—å:@{call.from_user.username}",
        )
    else:
        if db.get_end_of_free_week_subscription(call.from_user.id)[0] != None:
            db.set_match_result_true(
                callback_data.employee_tg_id,
                callback_data.employee_tg_id,
                callback_data.employer_tg_id,
            )
            await call.message.edit_reply_markup(reply_markup=contact_kb)
            await call.message.answer(f"–¢–µ–ª–µ–≥—Ä–∞–º–º —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è:@{callback_data.username}")
            await bot.send_message(
                chat_id=callback_data.employee_tg_id,
                text=f"–í–∑–∞–∏–º–Ω—ã–π –æ—Ç–≤–µ—Ç, —Å –≤–∞–º–∏ —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å:@{call.from_user.username}",
            )
        elif db.get_end_of_subscription(call.from_user.id)[0] != None:
            db.set_match_result_true(
                callback_data.employee_tg_id,
                callback_data.employee_tg_id,
                callback_data.employer_tg_id,
            )
            await call.message.edit_reply_markup(reply_markup=contact_kb)
            await call.message.answer(f"–¢–µ–ª–µ–≥—Ä–∞–º–º —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è:@{callback_data.username}")
            await bot.send_message(
                chat_id=callback_data.employee_tg_id,
                text=f"–í–∑–∞–∏–º–Ω—ã–π –æ—Ç–≤–µ—Ç, —Å –≤–∞–º–∏ —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å:@{call.from_user.username}",
            )
        elif db.get_free_vacancies_week(call.from_user.id)[0] >= 1:
            db.set_match_result_true(
                callback_data.employee_tg_id,
                callback_data.employee_tg_id,
                callback_data.employer_tg_id,
            )
            await call.message.edit_reply_markup(reply_markup=contact_kb)
            await call.message.answer(f"–¢–µ–ª–µ–≥—Ä–∞–º–º —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è:@{callback_data.username}")
            await bot.send_message(
                chat_id=callback_data.employee_tg_id,
                text=f"–í–∑–∞–∏–º–Ω—ã–π –æ—Ç–≤–µ—Ç, —Å –≤–∞–º–∏ —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å:@{call.from_user.username}",
            )
            db.subtract_free_vacancies(call.from_user.id)
        else:
            await call.message.answer(
                "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏. –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ –∫–Ω–æ–ø–∫–µ '–ø–æ–¥–ø–∏—Å–∫–∞' –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
            )
        await call.answer()


@router.callback_query(MyCallback_after.filter(F.path == "reject"))
async def respond_message_handler(
    call: types.CallbackQuery, callback_data: MyCallback_after
):
    logger.info(f"Received reject callback from user {call.from_user.id}")
    if callback_data.state == "find_employee":
        db.set_match_result_false(
            callback_data.employee_tg_id,
            callback_data.employer_tg_id,
            callback_data.employer_tg_id,
        )
        await call.message.edit_reply_markup(reply_markup=reject_kb)
    else:
        db.set_match_result_false(
            callback_data.employee_tg_id,
            callback_data.employee_tg_id,
            callback_data.employer_tg_id,
        )
        await call.message.edit_reply_markup(reply_markup=reject_kb)
    await call.answer()

@router.message(F.text == "–ø–æ–º–æ—â—å –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
async def help_and_feedback_handler(message: Message, state: FSMContext):
    logger.info(f"User {message.from_user.id} requested help and feedback information.")
    
    # Check if user is an employer
    is_employer = db.get_tg_id_employer(message.from_user.id) is not None
    
    if is_employer:
        help_text = (
            "Busybeaver –±–æ—Ç: –Ω–∞–π–¥–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∑–∞ —á–∞—Å –±–µ–∑ –æ—Ç–∫–ª–∏–∫–æ–≤, –¥–æ–ª–≥–∏—Ö —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–π –∏ –ø–µ—Ä–µ–±–æ—Ä–∞ —Ä–µ–∑—é–º–µ\n\n"
            "‚Ä¢ –ù–µ –Ω—É–∂–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Å–∞–π—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã, –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä—è–º–æ –≤ Telegram\n"
            "‚Ä¢ –ù–µ –Ω—É–∂–Ω–æ –æ—Ñ–æ—Ä–º–ª—è—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –Ω–∞ —Å–∞–π—Ç–µ, –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–æ–ª–Ω–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –∏ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–∏ —Å–≤—è–∂—É—Ç—Å—è —Å —Ç–æ–±–æ–π –Ω–∞–ø—Ä—è–º—É—é\n"
            "‚Ä¢ –ü–æ–ª—É—á–∞–π –æ—Ç–∫–ª–∏–∫–∏ —Ç–æ–ª—å–∫–æ –æ—Ç —Ç–µ—Ö, –∫—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å, –Ω–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞—Ç—å —Ç–æ–Ω–Ω—ã —Ä–µ–∑—é–º–µ\n"
            "‚Ä¢ –ù–µ –Ω—É–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —ç—Ç–∞–ø–æ–≤ ‚Äì —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏, –æ—Ç–±–æ—Ä —Ä–µ–∑—é–º–µ, –æ—Ç–∫–ª–∏–∫–∏, –æ—Ç–≤–µ—Ç—ã —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è–º, –∑–≤–æ–Ω–∫–∏, —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –≤ Zoom\n"
            "‚Ä¢ –ù–∞ hh.ru —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–¥–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ —Å—Ç–æ–∏—Ç –¥–æ 10000 —Ä—É–±–ª–µ–π, –∏ –æ—Ç–¥–µ–ª—å–Ω–æ –∑–∞ –∫–∞–∂–¥—ã–π –∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏, –≤ BusyBeaver –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ\n\n"
            "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É –¢–∏–Ω–¥–µ—Ä–∞:\n"
            "1. –ó–∞–ø—É—Å—Ç–∏ –±–æ—Ç –∏ –∑–∞–ø–æ–ª–Ω–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤\n"
            "2. –ë–æ—Ç —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —Ç–µ–±–µ 5 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É\n"
            "3. –ù–∞–∂–º–∏ \"–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è\" –∏–ª–∏ \"–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë\"\n"
            "4. –°–æ–∏—Å–∫–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–≤–æ–π –æ—Ç–∫–ª–∏–∫ —É —Å–µ–±—è –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –µ–≥–æ ‚Äì –≤–∞—à–∏ –∞–Ω–∫–µ—Ç—ã \"–º—ç—Ç—á–∞—Ç—Å—è\", –∏ –±–æ—Ç –ø–µ—Ä–µ–¥–∞–µ—Ç –≤–∞–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥—Ä—É–≥ –¥—Ä—É–≥–∞\n\n"
            "–ó–∞ —Å–∞–ø–ø–æ—Ä—Ç–æ–º –ø–∏—à–∏ —Å—é–¥–∞: @natalie_spacehub"
        )
    else:
        help_text = (
            "Busy beaver –±–æ—Ç: –Ω–∞–π–¥–∏ —Ä–∞–±–æ—Ç—É –∑–∞ —á–∞—Å –±–µ–∑ –æ—Ç–∫–ª–∏–∫–æ–≤, –¥–æ–ª–≥–∏—Ö —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–π –∏ –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏\n\n"
            "‚Ä¢ –ù–µ –Ω—É–∂–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Å–∞–π—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã, –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä—è–º–æ –≤ Telegram\n"
            "‚Ä¢ –ù–µ –Ω—É–∂–Ω–æ –æ—Ñ–æ—Ä–º–ª—è—Ç—å —Ä–µ–∑—é–º–µ –Ω–∞ —Å–∞–π—Ç–µ, –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–æ–ª–Ω–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–∏ —Å–≤—è–∂—É—Ç—Å—è —Å —Ç–æ–±–æ–π –Ω–∞–ø—Ä—è–º—É—é\n"
            "‚Ä¢ –ü–æ–ª—É—á–∞–π –æ—Ç–∫–ª–∏–∫–∏ —Ç–æ–ª—å–∫–æ –æ—Ç —Ç–µ—Ö, –∫—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å, –Ω–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞—Ç—å —Ç–æ–Ω–Ω—ã –≤–∞–∫–∞–Ω—Å–∏–π\n"
            "‚Ä¢ –ù–µ –Ω—É–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —ç—Ç–∞–ø–æ–≤ ‚Äì —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ, –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π, –æ—Ç–∫–ª–∏–∫–∏, –æ—Ç–≤–µ—Ç—ã —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞–º, –∑–≤–æ–Ω–∫–∏, —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –≤ Zoom\n"
            "‚Ä¢ –≠—Ç–æ –ë–ï–°–ü–õ–ê–¢–ù–û\n\n"
            "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É –¢–∏–Ω–¥–µ—Ä–∞:\n"
            "1. –ó–∞–ø—É—Å—Ç–∏ –±–æ—Ç –∏ –∑–∞–ø–æ–ª–Ω–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤\n"
            "2. –ë–æ—Ç —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —Ç–µ–±–µ 5 –≤–∞–∫–∞–Ω—Å–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–≤–æ–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é\n"
            "3. –ù–∞–∂–º–∏ \"–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è\" –∏–ª–∏ \"–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë\"\n"
            "4. –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–≤–æ–π –æ—Ç–∫–ª–∏–∫ —É —Å–µ–±—è –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –µ–≥–æ ‚Äì –≤–∞—à–∏ –∞–Ω–∫–µ—Ç—ã \"–º—ç—Ç—á–∞—Ç—Å—è\", –∏ –±–æ—Ç –ø–µ—Ä–µ–¥–∞–µ—Ç –≤–∞–º –ø—Ä—è–º—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥—Ä—É–≥ –¥—Ä—É–≥–∞\n\n"
            "–ó–∞ —Å–∞–ø–ø–æ—Ä—Ç–æ–º –ø–∏—à–∏ —Å—é–¥–∞: @natalie_spacehub"
        )
    
    keyboard = employer_main_kb if is_employer else main_kb
    await message.answer(help_text, reply_markup=keyboard)